#!/bin/bash
START_TIME=$(date +%s)
echo "======================================================================================"
echo "  
 
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù       ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 
                                                                                                                                          
"

echo "üöÄ Inicializando containers e preparando ambiente da aplica√ß√£o..."

# Lista de containers esperados
containers=("container-bd" "container-java" "container_fluxocerto")

# Fun√ß√£o para verificar e iniciar container
iniciar_container() {
    nome="$1"

    # Verifica se o container existe
    if ! sudo docker ps -a --format '{{.Names}}' | grep -q "^${nome}$"; then
        echo "‚ùå Container '${nome}' n√£o existe. Crie ou recupere o container manualmente."
        return
    fi

    # Verifica se o container est√° rodando
    if ! sudo docker ps --format '{{.Names}}' | grep -q "^${nome}$"; then
        echo "‚è≥ Iniciando container '${nome}'..."
        sudo docker start "$nome" > /dev/null
        if [ $? -eq 0 ]; then
            echo "‚úÖ Container '${nome}' iniciado com sucesso."
        else
            echo "‚ùå Falha ao iniciar o container '${nome}'."
        fi
    else
        echo "‚úÖ Container '${nome}' j√° est√° rodando."
    fi
}

# Itera sobre todos os containers e os inicia
for c in "${containers[@]}"; do
    iniciar_container "$c"
done

# Atualizar reposit√≥rio dentro do container_fluxocerto
echo ""
echo "üîÑ Executando 'git pull' no container_fluxocerto..."
sudo docker exec container_fluxocerto bash -c "cd /usr/src/app && git pull"

echo ""
echo "‚ñ∂Ô∏è Iniciando a aplica√ß√£o com 'npm run dev' no container_fluxocerto..."
sudo docker exec -d container_fluxocerto bash -c "cd /usr/src/app && npm install && npm run dev"

echo ""
echo "‚úÖ Processo de inicializa√ß√£o conclu√≠do com sucesso!"

echo "‚úÖ Sua aplica√ß√£o est√° rodando com sucesso!"
IP=$(curl -s http://checkip.amazonaws.com)
echo ""
echo "üåê Acesse a aplica√ß√£o rodando em: http://fluxocerto.duckdns.org/"
echo ""
echo ""
echo "üîó Ou ent√£o, caso n√£o tenha acesso ao IP Fixo do DuckDNS, acesse a aplica√ß√£o rodando em: http://$IP:8080"
echo ""
echo "üîç Testando conex√£o..."
if curl -s --head --request GET "http://$IP:8080" | grep "200 OK" > /dev/null; then
    echo "‚úÖ Conex√£o bem-sucedida! Tudo certo!"
else
    echo "‚ö†Ô∏è Aten√ß√£o: N√£o foi poss√≠vel validar a conex√£o automaticamente."
    echo "   Verifique se os containers est√£o rodando ou tente novamente em alguns segundos."
fi


# Mostrar o tempo total
END_TIME=$(date +%s)
ELAPSED_TIME=$((END_TIME - START_TIME))

echo ""
echo "‚è±Ô∏è Tempo total de prepara√ß√£o do ambiente: ${ELAPSED_TIME} segundos."

echo "======================================================================================"
